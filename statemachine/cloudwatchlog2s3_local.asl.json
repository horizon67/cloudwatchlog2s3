{
    "Comment": "A state machine that does cloudwatch log S3Export.",
    "StartAt": "Configure",
    "States": {
        "Configure": {
            "Type": "Pass",
            "Result": {
                "index": 0
            },
            "ResultPath": "$.iterator",
            "Next": "DescribeLogGroups"
        },
        "DescribeLogGroups": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:ap-northeast-1:123456789012:function:DescribeLogGroupsFunction",
            "ResultPath": "$.describeLogGroups",
            "Next": "IsLogGroupEmpty",
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 1.5
                }
            ],
            "Catch": [ {
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "NotifyFailure"
            } ]
        },
        "IsLogGroupEmpty": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.describeLogGroups.logGroupsCount",
                    "NumericEquals": 0,
                    "Next": "Succeed"
                }
            ],
            "Default": "ExportLogGroup"
        },
        "ExportLogGroup": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:ap-northeast-1:123456789012:function:ExportLogGroupFunction",
            "ResultPath": "$.iterator",
            "Next": "DescribeExportTask",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 1.5
                }
            ],
            "Catch": [ {
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "NotifyFailure"
            } ]
        },
        "DescribeExportTask": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:ap-northeast-1:123456789012:function:DescribeExportTaskFunction",
            "ResultPath": "$.describeExportTask",
            "Next": "IsExportTask",
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 1.5
                }
            ],
            "Catch": [ {
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "NotifyFailure"
            } ]
        },
        "NotifyFailure": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:ap-northeast-1:123456789012:function:NotifyFailureFunction",
            "Next": "Fail"
        },
        "IsExportTask": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.describeExportTask.statusCode",
                    "StringEquals": "COMPLETED",
                    "Next": "IsComplete"
                },
                {
                  "Or": [
                    {
                      "Variable": "$.describeExportTask.statusCode",
                      "StringEquals": "PENDING"
                    },
                    {
                      "Variable": "$.describeExportTask.statusCode",
                      "StringEquals": "RUNNING"
                    }
                  ],
                  "Next": "WaitSeconds"
                }
            ],
            "Default": "Fail"
        },
        "WaitSeconds": {
            "Type": "Wait",
            "Seconds": 3,
            "Next": "DescribeExportTask"
        },
        "IsComplete": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.iterator.isCompleted",
                    "BooleanEquals": true,
                    "Next": "Succeed"
                }
            ],
            "Default": "ExportLogGroup"
        },
        "Succeed": {
            "Type": "Succeed"
        },
        "Fail": {
            "Type": "Fail"
        }
    }
}
